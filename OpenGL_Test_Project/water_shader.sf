#version 330

uniform sampler2D reflectionTexture;
uniform sampler2D refractionTexture;
uniform sampler2D refractionDepthTexture;
uniform sampler2D normalMap;
uniform sampler2D dudvMap;

struct LightIntensity {
	vec3 Ld;
	vec3 Ls;
	vec3 La;
};

struct MaterialInfo {
	vec3 Kd;
	vec3 Ks;
	vec3 Ka;
};

struct SpotLightInfo {
	vec3 intensity;
	vec3 direction;
	float exponent;
	float cutoff;
};

varying vec2 texCoords;
varying vec4 clipSpace;
varying vec3 toLightVector;
varying vec3 toCameraVector;
varying vec3 toSpotLighVector;
varying float visibility;

uniform LightIntensity lightInfo;
uniform SpotLightInfo spotLight;
uniform MaterialInfo materialInfo;
uniform vec3 fogColor;
uniform float moveFactor;

float waveLength = 0.02;
float near = 5;
float far = 2000;

vec4 basicLight() {
	return vec4(0);
}

vec4 phongLight(vec3 toLightVector, vec3 toCameraVector, vec3 normal) {
	vec3 specularColor = vec3(0);
	
	vec3 reflectedLight = normalize(reflect(-toLightVector, normal));
	float specularFactor = dot(reflectedLight, toCameraVector);

	if(specularFactor > 0) {
		specularFactor = pow(specularFactor, 10);
		specularColor = lightInfo.Ls * 0.7 * specularFactor;
	}
	
	return vec4(specularColor, 0.0);
	//return vec4(1,1,1,1);
}

void main() {
	vec2 ndc = (vec2(clipSpace.xy/clipSpace.w) + 1)/2.0;
	vec2 texCoordinates = texCoords*14;
	
	vec2 reflectionTextureCoords = vec2(ndc.x, -ndc.y);
	vec2 refractionTextureCoords = vec2(ndc.x, ndc.y);

	float depth = texture2D(refractionDepthTexture, refractionTextureCoords).r;
	float floorDistance = 2.0 * near * far / (far + near - (2.0 * depth - 1.0) * (far - near));
	depth = gl_FragCoord.z;
	float waterDistance = 2.0 * near * far / (far + near - (2.0 * depth - 1.0) * (far - near));
	float waterDepth = floorDistance - waterDistance;

	vec2 distrotedTexCoords = texture2D(normalMap, vec2((texCoordinates).x + moveFactor,(texCoordinates).y)).rg * 0.1;
	distrotedTexCoords = texCoordinates + vec2(distrotedTexCoords.x, distrotedTexCoords.y + moveFactor);
	vec2 distortion = (texture2D(normalMap, distrotedTexCoords).rg * 2 - 1) * waveLength * clamp(waterDepth/15, 0, 1);
	
	reflectionTextureCoords = reflectionTextureCoords + distortion;
	refractionTextureCoords = refractionTextureCoords + distortion;
	
	refractionTextureCoords = clamp(refractionTextureCoords, 0.001, 0.999);
	reflectionTextureCoords.x = clamp(reflectionTextureCoords.x, 0.001, 0.999);
	reflectionTextureCoords.y = clamp(reflectionTextureCoords.y, -0.999, -0.001);

	vec4 reflectionColor = texture2D(reflectionTexture, reflectionTextureCoords);
	vec4 refractionColor = texture2D(refractionTexture, refractionTextureCoords);
	vec4 normalMapColor = texture2D(normalMap, texCoordinates + distortion);
	vec3 normal = normalize(vec3(normalMapColor.r * 2 - 1, normalMapColor.b*1.3, normalMapColor.g * 2 - 1));
	
	float fressnelFactor = pow(clamp(dot(toCameraVector, vec3(normal.x, normal.y*3, normal.z)), 0, 1), 1);

	vec4 outColor = mix(reflectionColor, refractionColor, fressnelFactor);
	outColor = mix(outColor, vec4(0, 0.5, 0.3, 1), 0.4);

	float distance = length(toLightVector);
	vec3 toLightVector1 = normalize(toLightVector);
	vec4 light = phongLight(toLightVector1, toCameraVector, normal) * clamp(waterDepth/20, 0, 1);
	
	//gl_FragColor = vec4(waterDepth, waterDepth, 0, 1);
	gl_FragColor = mix(vec4(fogColor,1), outColor + light, visibility);
	gl_FragColor.a = clamp(waterDepth/8, 0.1, 1);
}